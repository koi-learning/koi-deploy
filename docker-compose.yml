version: '3.7'
services:
  db:
    container_name: koi-db-serv
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: koiserver
      MYSQL_USER: koi
      MYSQL_PASSWORD: koikoi
    networks:
      - shared-net
    volumes:
      - mysql-data:/var/lib/mysql
    restart: unless-stopped

  # the koi-api-service
  # it handles all REST-requests and accesses the MySQL-server locally
  koi-api:
    container_name: koi-api-serv
    
    # start MySQL when starting this service
    depends_on:
      - db
    
    # check out the latest stable sources and build the image locally
    build:
      context: https://github.com/koi-learning/koi-api.git#main
    
    # set the configuration to use the local MySQL-instance
    environment:
      KOI_CONFIG: "./config/docker.py"
    
    # wait-for-it by Giles Hall! see: https://github.com/vishnubob/wait-for-it
    entrypoint: /wait-for-it.sh --host=db --port=3306 --strict --timeout=0 -- waitress-serve --port 8080 --call koi_api:create_app
    networks:
      - shared-net

    volumes:
      - sample-data:/temp

    # as MySQL will need some time to start, restart the service while 
    restart: unless-stopped

  # the worker service
  # this will run a single instance of the worker-process
  koi-worker:
    container_name: koi-worker
    
    # start the koi-api when starting this service
    depends_on:
      - koi-api
    
    # check out the latest stable sources and build the image locally
    build:
      context: https://github.com/koi-learning/koi-core.git#main
      dockerfile: cpu.Dockerfile
    
    networks:
      - shared-net
     
    volumes:
      - core-logs:/logs
      - tf-logs-2D:/tf-logs/2D
      - tf-logs-3D:/tf-logs/3D

    # disable logs
    environment:
      TF_CPP_MIN_LOG_LEVEL: "3"

    # overwrite the entrypoint with the deployment specific url
    entrypoint: /wait-for-it.sh --host=koi-api --port=8080 --strict --timeout=0 -- koi-worker.py -s=http://koi-api:8080 -u=admin -p=admin -l=INFO --logfile=/logs/core.log
    restart: unless-stopped

  koi-tensorflow:
    image: tensorflow/tensorflow:latest  # Does this ship with cuda10.0 installed or do I need a separate container for it?
    restart: unless-stopped
    privileged: true
    volumes:
      - tf-logs-2D:/tf-logs/2D
      - tf-logs-3D:/tf-logs/3D

    networks:
      - shared-net
    
    ports:
      - "6006:6006"

    entrypoint: tensorboard --logdir tf-logs/ --bind_all

  # the webserver serving the pwa and forwarding the api
  koi-pwa:
    container_name: koi-web-serv
    
    # start the koi-api when starting this service
    depends_on:
      - koi-api
    
    # use the included dockerfile
    build:
      context: .\koi-pwa
    ports:
      - "80:80"
    
    networks:
      - shared-net
    restart: unless-stopped

volumes:
  sample-data:
  mysql-data:
  core-logs:
  tf-logs-2D:
  tf-logs-3D:

networks:
  shared-net: